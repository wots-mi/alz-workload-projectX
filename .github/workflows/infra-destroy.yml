name: Workload LZ destroy

on:
  workflow_dispatch:

env:
  TF_WORKING_DIR: "workload-landingzone"
  REQUIRED_TF_VERSION: "~> 1.9"
  VARIABLE_FILE: "terraform.tfvars"

jobs:
  destroy-infrastructure:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Authenticate with Azure (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        allow-no-subscriptions: true

    - name: Set Environment Variables for Terraform Backend
      run: |
        echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
      
    - name: Install Terraform
      run: |
        set -e
        REQUIRED_TF_VERSION="1.9.0"
        
        if ! command -v terraform &> /dev/null || [ "$(terraform version | head -n1 | cut -d' ' -f2 | tr -d 'v')" != "$REQUIRED_TF_VERSION" ]; then
          echo "Installing Terraform $REQUIRED_TF_VERSION..."
          curl -fsSL -o terraform.zip "https://releases.hashicorp.com/terraform/${REQUIRED_TF_VERSION}/terraform_${REQUIRED_TF_VERSION}_linux_amd64.zip"
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          rm -f terraform.zip
        else
          echo "Terraform $REQUIRED_TF_VERSION is already installed."
        fi

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Destroy
      run: terraform destroy -var-file="${{ env.VARIABLE_FILE }}" -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}
